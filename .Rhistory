ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
shiny::runApp('Desktop/FDA/Project')
shiny::runApp('Desktop/FDA/Project')
die <- c(-1, 2, -3, 4, -5, 6)
abs_loop <- function(vec) {
for(i in 1:length(vec)) {
if(vec[i] < 0) {
vec[i] = -vec[i]
}
}
vec
}
abs_die <- abs_loop(die)
for(i in 1:length(die)) {
print(die[i])
}
die <- c(-1, 2, -3, 4, -5, 6)
abs_loop <- function(vec) {
for(i in 1:length(vec)) {
if(vec[i] < 0) {
vec[i] = -vec[i]
}
}
vec
}
abs_die <- abs_loop(die)
for(i in 1:length(abs_die)) {
print(abs_die[i])
}
die <- c(-1, 2, -3, 4, -5, 6)
abs_loop <- function(vec) {
for(i in 1:length(vec)) {
if(vec[i] < 0) {
vec[i] = -vec[i]
}
}
vec
}
abs_die <- abs_loop(die)
for(i in 1:length(die)) {
print(die[i])
}
for(i in 1:length(abs_die)) {
print(abs_die[i])
}
die[die < 3]
die[die < 0]
die[die < 0] = -die[die < 0]
die[die < 0]
die
die <- c(-1, 2, -3, 4, -5, 6)
absdie <- die
absdie
help(plumber)
shiny::runApp('Desktop/FDA/Project')
runApp('Desktop/FDA/Project')
runApp('Desktop/FDA/Project')
setwd("~/Desktop/FDA/Project")
runApp()
runApp()
runApp()
movelist
#print(s)
movelist<- strsplit(s,split = ",")
movelist <- "e4,Nf6,f3,d5,Qe2,Nc6,Qd3,e6,e5"
movelist <- strsplit(s, split=",")
movelist <- strsplit(movelist, split=",")
movelist
movelist[::2]
movelist[3]
runApp
runApp()
plumb(file='graphs/graphs_all.R')$run()
library(ggplot2)
#* @param s The movelist to parse
#* @get /graph1
graph1 <- function (s) {
#print(s)
movelist<- strsplit(s,split = ",")
#print(movelist)
queen=0
knight=0
bishop=0
rook=0
pawn=0
o <- 0
for (i in movelist[3]) {
o <- o+1
if(o %% 2 == 0) next
print(o)
for (j in i) {
temptext=substring(j,1,1)
if(temptext=="N")
knight=knight+1
else if(temptext=="B")
bishop=bishop+1
else if(temptext=="Q")
queen=queen+1
else if(temptext=="R")
rook=rook+1
else
pawn=pawn+1
}
}
print(queen)
print(knight)
print(bishop)
print(rook)
print(pawn)
pieces <- as.factor(c("Queen", "Knight", "Bishop", "Rook", "Pawn"))
moves_per_piece <- c(queen,knight, bishop, rook, pawn)
chessTest <- data.frame(pieces, moves_per_piece)
p1 <- ggplot(chessTest) +
geom_point(aes(x=pieces, y=moves_per_piece, size = moves_per_piece,color= pieces)) +
ylim(0,50)+ scale_size(range = c(10,18))+theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.y =element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
plot.margin = margin(t=0.5, r=5, b=0.5, l=5, unit = "cm"),
legend.key.size = unit(0.05,"cm"), legend.key.width = unit(0.1,"cm"), legend.margin = margin(t=0.5,r=0.1,b=0.5,l=0.1,unit = "mm"),
panel.grid.major = element_blank(),panel.grid.minor = element_blank())
save_loc <- "../www/img/bubblechart.png"
print(save_loc)
ggsave(save_loc, plot = p1)
}
#s<-"e4,Nf6,f3,d5,Qe2,Nc6,Qd3,e6,e5,Nb4,Qc3,d4,Qb3,Nfd5,Bb5+,Bd7,Bc4,Nf4,Qxb4,Bxb4,c3,Bc5,d3,Nxd3+,Kd1,Nxc1,Kxc1,Qg5+,f4,Qxg2,Ne2,Qxh1+,Ng1,Qxg1+,Kc2,Qxh2+,Kc1,Qxf4+,Kc2,Qf2+,Kd1,Ba4+,b3,Qf3+,Kc2,dxc3,bxa4,Rd8,Nxc3,Qf5+,Bd3,Qxe5,Re1,Qh2+,Re2,Qf4,Rd2,Ke7,a5,Rd6,a6,bxa6,a4,Rhd8,a5,Rxd3,Rxd3,Rxd3,Kxd3,Qd4+,Kc2,f5,Kb3,f4,Ne2,Qd3+,Nc3,f3,Kb2,f2,Nd1,Qxd1"
#graph1(s)
library(ggplot2)
#* @param s The movelist to parse
#* @get /graph1
graph1 <- function (s) {
#print(s)
movelist<- strsplit(s,split = ",")
#print(movelist)
queen=0
knight=0
bishop=0
rook=0
pawn=0
o <- 0
for (i in movelist[3]) {
o <- o+1
if(o %% 2 == 0) next
print(o)
for (j in i) {
temptext=substring(j,1,1)
if(temptext=="N")
knight=knight+1
else if(temptext=="B")
bishop=bishop+1
else if(temptext=="Q")
queen=queen+1
else if(temptext=="R")
rook=rook+1
else
pawn=pawn+1
}
}
print(queen)
print(knight)
print(bishop)
print(rook)
print(pawn)
pieces <- as.factor(c("Queen", "Knight", "Bishop", "Rook", "Pawn"))
moves_per_piece <- c(queen,knight, bishop, rook, pawn)
chessTest <- data.frame(pieces, moves_per_piece)
p1 <- ggplot(chessTest) +
geom_point(aes(x=pieces, y=moves_per_piece, size = moves_per_piece,color= pieces)) +
ylim(0,50)+ scale_size(range = c(10,18))+theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.y =element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
plot.margin = margin(t=0.5, r=5, b=0.5, l=5, unit = "cm"),
legend.key.size = unit(0.05,"cm"), legend.key.width = unit(0.1,"cm"), legend.margin = margin(t=0.5,r=0.1,b=0.5,l=0.1,unit = "mm"),
panel.grid.major = element_blank(),panel.grid.minor = element_blank())
save_loc <- "../www/img/bubblechart.png"
print(save_loc)
ggsave(save_loc, plot = p1)
}
#s<-"e4,Nf6,f3,d5,Qe2,Nc6,Qd3,e6,e5,Nb4,Qc3,d4,Qb3,Nfd5,Bb5+,Bd7,Bc4,Nf4,Qxb4,Bxb4,c3,Bc5,d3,Nxd3+,Kd1,Nxc1,Kxc1,Qg5+,f4,Qxg2,Ne2,Qxh1+,Ng1,Qxg1+,Kc2,Qxh2+,Kc1,Qxf4+,Kc2,Qf2+,Kd1,Ba4+,b3,Qf3+,Kc2,dxc3,bxa4,Rd8,Nxc3,Qf5+,Bd3,Qxe5,Re1,Qh2+,Re2,Qf4,Rd2,Ke7,a5,Rd6,a6,bxa6,a4,Rhd8,a5,Rxd3,Rxd3,Rxd3,Kxd3,Qd4+,Kc2,f5,Kb3,f4,Ne2,Qd3+,Nc3,f3,Kb2,f2,Nd1,Qxd1"
#graph1(s)
graph1("e4,Nf6,f3,d5,Qe2,Nc6,Qd3,e6,e5")
runApp()
runApp()
library(ggplot2)
#* @param s The movelist to parse
#* @get /graph1
graph1 <- function (s) {
#print(s)
movelist<- strsplit(s,split = ",")
#print(movelist)
queen=0
knight=0
bishop=0
rook=0
pawn=0
o <- 0
for (i in movelist[3]) {
for (j in i) {
o <- o+1
if(o %% 2 == 0) next
cat("o: ", o)
temptext=substring(j,1,1)
if(temptext=="N")
knight=knight+1
else if(temptext=="B")
bishop=bishop+1
else if(temptext=="Q")
queen=queen+1
else if(temptext=="R")
rook=rook+1
else
pawn=pawn+1
}
}
print(queen)
print(knight)
print(bishop)
print(rook)
print(pawn)
pieces <- as.factor(c("Queen", "Knight", "Bishop", "Rook", "Pawn"))
moves_per_piece <- c(queen,knight, bishop, rook, pawn)
chessTest <- data.frame(pieces, moves_per_piece)
p1 <- ggplot(chessTest) +
geom_point(aes(x=pieces, y=moves_per_piece, size = moves_per_piece,color= pieces)) +
ylim(0,50)+ scale_size(range = c(10,18))+theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.y =element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
plot.margin = margin(t=0.5, r=5, b=0.5, l=5, unit = "cm"),
legend.key.size = unit(0.05,"cm"), legend.key.width = unit(0.1,"cm"), legend.margin = margin(t=0.5,r=0.1,b=0.5,l=0.1,unit = "mm"),
panel.grid.major = element_blank(),panel.grid.minor = element_blank())
save_loc <- "../www/img/bubblechart.png"
print(save_loc)
ggsave(save_loc, plot = p1)
}
#s<-"e4,Nf6,f3,d5,Qe2,Nc6,Qd3,e6,e5,Nb4,Qc3,d4,Qb3,Nfd5,Bb5+,Bd7,Bc4,Nf4,Qxb4,Bxb4,c3,Bc5,d3,Nxd3+,Kd1,Nxc1,Kxc1,Qg5+,f4,Qxg2,Ne2,Qxh1+,Ng1,Qxg1+,Kc2,Qxh2+,Kc1,Qxf4+,Kc2,Qf2+,Kd1,Ba4+,b3,Qf3+,Kc2,dxc3,bxa4,Rd8,Nxc3,Qf5+,Bd3,Qxe5,Re1,Qh2+,Re2,Qf4,Rd2,Ke7,a5,Rd6,a6,bxa6,a4,Rhd8,a5,Rxd3,Rxd3,Rxd3,Kxd3,Qd4+,Kc2,f5,Kb3,f4,Ne2,Qd3+,Nc3,f3,Kb2,f2,Nd1,Qxd1"
#graph1(s)
graph1("e4,Nf6,f3,d5,Qe2,Nc6,Qd3,e6,e5")
movelist <- strsplit("e4,Nf6,f3,d5,Qe2,Nc6,Qd3,e6,e5", split = ",")
movelist[1]
movelist[[1]]
runApp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
length("e4,Nf6,f3,d5,Qe2,Nc6,Qd3,e6,e5,Nb4,Qc3,d4,Qb3,Nfd5,Bb5+,Bd7,Bc4,Nf4,Qxb4,Bxb4,c3,Bc5,d3,Nxd3+,Kd1,Nxc1,Kxc1,Qg5+,f4,Qxg2,Ne2,Qxh1+,Ng1,Qxg1+,Kc2,Qxh2+,Kc1,Qxf4+,Kc2,Qf2+,Kd1,Ba4+,b3,Qf3+,Kc2,dxc3,bxa4,Rd8,Nxc3,Qf5+,Bd3,Qxe5,Re1,Qh2+,Re2,Qf4,Rd2,Ke7,a5,Rd6,a6,bxa6,a4,Rhd8,a5,Rxd3,Rxd3,Rxd3,Kxd3,Qd4+,Kc2,f5,Kb3,f4,Ne2,Qd3+,Nc3,f3,Kb2,f2,Nd1,Qxd1")
nchar("e4,Nf6,f3,d5,Qe2,Nc6,Qd3,e6,e5,Nb4,Qc3,d4,Qb3,Nfd5,Bb5+,Bd7,Bc4,Nf4,Qxb4,Bxb4,c3,Bc5,d3,Nxd3+,Kd1,Nxc1,Kxc1,Qg5+,f4,Qxg2,Ne2,Qxh1+,Ng1,Qxg1+,Kc2,Qxh2+,Kc1,Qxf4+,Kc2,Qf2+,Kd1,Ba4+,b3,Qf3+,Kc2,dxc3,bxa4,Rd8,Nxc3,Qf5+,Bd3,Qxe5,Re1,Qh2+,Re2,Qf4,Rd2,Ke7,a5,Rd6,a6,bxa6,a4,Rhd8,a5,Rxd3,Rxd3,Rxd3,Kxd3,Qd4+,Kc2,f5,Kb3,f4,Ne2,Qd3+,Nc3,f3,Kb2,f2,Nd1,Qxd1")
length(strsplit("e4,Nf6,f3,d5,Qe2,Nc6,Qd3,e6,e5,Nb4,Qc3,d4,Qb3,Nfd5,Bb5+,Bd7,Bc4,Nf4,Qxb4,Bxb4,c3,Bc5,d3,Nxd3+,Kd1,Nxc1,Kxc1,Qg5+,f4,Qxg2,Ne2,Qxh1+,Ng1,Qxg1+,Kc2,Qxh2+,Kc1,Qxf4+,Kc2,Qf2+,Kd1,Ba4+,b3,Qf3+,Kc2,dxc3,bxa4,Rd8,Nxc3,Qf5+,Bd3,Qxe5,Re1,Qh2+,Re2,Qf4,Rd2,Ke7,a5,Rd6,a6,bxa6,a4,Rhd8,a5,Rxd3,Rxd3,Rxd3,Kxd3,Qd4+,Kc2,f5,Kb3,f4,Ne2,Qd3+,Nc3,f3,Kb2,f2,Nd1,Qxd1", split = ","))
length(strsplit("e4,Nf6,f3,d5,Qe2,Nc6,Qd3,e6,e5,Nb4,Qc3,d4,Qb3,Nfd5,Bb5+,Bd7,Bc4,Nf4,Qxb4,Bxb4,c3,Bc5,d3,Nxd3+,Kd1,Nxc1,Kxc1,Qg5+,f4,Qxg2,Ne2,Qxh1+,Ng1,Qxg1+,Kc2,Qxh2+,Kc1,Qxf4+,Kc2,Qf2+,Kd1,Ba4+,b3,Qf3+,Kc2,dxc3,bxa4,Rd8,Nxc3,Qf5+,Bd3,Qxe5,Re1,Qh2+,Re2,Qf4,Rd2,Ke7,a5,Rd6,a6,bxa6,a4,Rhd8,a5,Rxd3,Rxd3,Rxd3,Kxd3,Qd4+,Kc2,f5,Kb3,f4,Ne2,Qd3+,Nc3,f3,Kb2,f2,Nd1,Qxd1", split = ",")[[1]])
runApp()
runApp()
runApp()
runApp()
runApp()
length(movelist)/2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pieces <- as.factor(c("Queen", "Knight", "Bishop", "Rook", "Pawn"))
moves_per_piece <- c(queen,knight, bishop, rook, pawn)
moves_per_piece <- c(5,6,3,4,23)
pieces
pieces$levels
pieces.levels
pieces[levels()]
levels(pieces)
levels(pieces) + rep('\n', length(pieces)) + moves_per_piece
paste(levels(pieces), rep('\n', length(pieces)), moves_per_piece)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pr ("graphs/graphs_all.R") %>%
pr_run(port = 8000)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
game <- Chess$new()
movelist <- "e4,e5,Bc4,Nc6,Qh5,Nf6,Qxf7"
movelist <- strsplit(movelist, ",")
for(m in movelist[[1]]) {
game() %>%
move(m);
}
library(stockfish)
library(chess)
library(bigchess)
library(rchess)
require(magrittr)
game <- Chess$new()
movelist <- "e4,e5,Bc4,Nc6,Qh5,Nf6,Qxf7"
movelist <- strsplit(movelist, ",")
for(m in movelist[[1]]) {
game() %>%
move(m);
}
Y
game <- Chess$new()
movelist <- "e4,e5,Bc4,Nc6,Qh5,Nf6,Qxf7"
movelist <- strsplit(movelist, ",")
for(m in movelist[[1]]) {
game() %>%
move(m);
}
game <- Chess$new()
movelist <- "e4,e5,Bc4,Nc6,Qh5,Nf6,Qxf7"
movelist <- strsplit(movelist, ",")
for(m in movelist[[1]]) {
game$move(m);
}
runApp()
library(stockfish)
library(chess)
library(bigchess)
library(rchess)
require(magrittr)
bestmovepredict <- function(moves){
movesaf<- strsplit(moves,split = ",")
initmoves<-c()
new_game<-Chess$new()
bestmoves=c()
playermoves=c()
for (i in 1:length(movesaf[[1]])) {
if(i<5){
new_game$move(movesaf[[1]][i])
bestmoves<- c(bestmoves,movesaf[[1]][i])
playermoves<-c(playermoves,movesaf[[1]][i])
}
else{
new_game$move(movesaf[[1]][i])
engine<- fish$new()
engine$process
engine$position(new_game$fen())
m<-engine$go()
if(m!="bestmove (none)"){
m<-substr(m,10,13)
m<-lan2san(m)
}
else{
break
}
bestmoves<- c(bestmoves,m)
playermoves<-c(playermoves,movesaf[[1]][i])
engine$quit()
}
}
#print(bestmoves)
#print(playermoves)
countbest=0
for (i in 5:length(bestmoves)) {
#ap<-analyze_position(engine = "C:/Users/rohit/Downloads/stockfish_14.1_win_x64_avx2/stockfish_14.1_win_x64_avx2.exe",san = m,depth= 6)
ap <- analyze_position(engine = "/Applications/Stockfish.app/Contents/Resources/stockfish-x86-64-bmi2", san = m, depth = 6)
print(ap$score)
if(playermoves[i]==substr(bestmoves[i],4,nchar(bestmoves[i]))){
# print(substr(bestmoves[i],4,nchar(bestmoves[i])))
#print(i)
countbest=countbest+1
}
}
# print(countbest)
countworst= length(playermoves)-countbest
bvsw<-c(countbest,countworst)
barplot(bvsw,names.arg=c("best moves", "worst moves"),xlab = "Moves type", ylab = "Count", main = "Bargraph showing best moves vs worst moves in a game of chess")
}
s="e4,e5,Nf3,Nc6,Nc3,d6,d4,b5,dxe5,dxe5,Nxb5,a6,Nxe5,Nxe5,Qxd8+,Kxd8,Bf4,Ng4,f3,Bb4+,c3,Ne3,cxb4,Nc2+,Kd1,Nxa1,Nc3,Be6,Be5,Bxa2,Bxg7,Bb3+,Kd2,Rc8,Bxa6,Nc2,Bxc8,Kxc8,Bxh8,Ne7,Bf6,Nc6,Nd5,N6xb4,Nxb4,c5,Nxc2,Bc4,Rc1,Bb3,Na3,c4,Rxc4+,Bxc4,Nxc4,h5,Ne5,h4,Nxf7,h3,gxh3,Kd7,h4,Ke6,h5,Kxf6,h6,Kxf7,h7,Kg7,b4,Kxh7,b5,Kg8,b6,Kf8,b7,Ke8,b8=Q+,Kd7,Qb6,Kc8,e5,Kd7,f4,Ke7,h4,Kd7,f5,Ke7,h5,Kf7,h6,Kg8,f6,Kh7,e6,Kxh6,e7,Kh7,e8=Q,Kh6,f7+,Kg7,f8=Q+,Kh7,Kc1"
bestmovepredict(s)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Rserve()
library(Rserve)
Rserve()
Rserve(args = --save)
Rserve(args = "--save")
q()
