peopleBirthDeathData$BirthYear <- as.numeric(peopleBirthDeathData$BirthYear)
peopleBirthDeathData$DeathYear <- as.numeric(peopleBirthDeathData$DeathYear)
peopleBirthDeathData$Age <- peopleBirthDeathData$DeathYear -
peopleBirthDeathData$BirthYear
peopleBirthDeathData
female <- grepl("f", peopleBirthDeathData$Gender)
male <- grepl("m", peopleBirthDeathData$Gender)
peopleBirthDeathData$Gender <- NA
peopleBirthDeathData$Gender[male] <- "male"
peopleBirthDeathData$Gender[female] <- "female"
peopleBirthDeathData$Gender <- as.factor(peopleBirthDeathData$Gender)
peopleBirthDeathData
install.packages("tidyverse")
xx <- -9:9
plot(xx, sqrt(bs(xx)), col = 'red')
plot(xx, sqrt(abs(xx)), col = 'red')
lines(spline(xx, sqrt(abs), n = 101), ol = 'pink')
lines(spline(xx, sqrt(abs(xx)), n = 101), ol = 'pink')
lines(spline(xx, sqrt(abs(xx)), n = 101), col = 'pink')
library(plotrix)
install.packages('plotrix')
library(plotrix)
pie(slices, new = new_labels, main = 'Simple pie chart', col = rainbow(3))
library(plotrix)
slices = c(15, 20, 14, 35, 8)
names <- c("US", "IND", "BAN", "AUS", "UK")
pct <- round(slices/sum(slices) = 100)
new_labels <- paste(names, '-', pct, '%', sep = "")
pie(slices, new = new_labels, main = 'Simple pie chart', col = rainbow(3))
library(plotrix)
slices = c(15, 20, 14, 35, 8)
names <- c("US", "IND", "BAN", "AUS", "UK")
pct <- round(slices/sum(slices) = 100)
new_labels <- paste(names, '-', pct, '%', sep = "")
pie(slices, new = new_labels, main = 'Simple pie chart', col = rainbow(length(slices)), explode = 0.0)
library(plotrix)
slices = c(15, 20, 14, 35, 8)
names <- c("US", "IND", "BAN", "AUS", "UK")
pct <- round(slices/sum(slices) = 100)
library(plotrix)
slices = c(15, 20, 14, 35, 8)
names <- c("US", "IND", "BAN", "AUS", "UK")
pct <- round(slices/sum(slices) * 100)
new_labels <- paste(names, '-', pct, '%', sep = "")
pie(slices, new = new_labels, main = 'Simple pie chart', col = rainbow(length(slices)), explode = 0.0)
pie3D(slices, new = new_labels, main = 'Simple pie chart', col = rainbow(length(slices)), explode = 0.0)
library(plotrix)
slices = c(15, 20, 14, 35, 8)
names <- c("US", "IND", "BAN", "AUS", "UK")
pct <- round(slices/sum(slices) * 100)
new_labels <- paste(names, '-', pct, '%', sep = "")
pie3D(slices, new = new_labels, main = 'Simple pie chart', col = rainbow(length(slices)), explode = 0.5)
read.csv()
library(plotrix)
slices = c(15, 20, 14, 35, 8)
names <- c("US", "IND", "BAN", "AUS", "UK")
pct <- round(slices/sum(slices) * 100)
new_labels <- paste(names, '-', pct, '%', sep = "")
pie3D(slices, new = new_labels, main = 'Simple pie chart', col = rainbow(length(slices)), explode = 0.3)
read.csv()
library(MASS)
school=painters$School
school.freq=table(school)
pie(school.freq)
school.relfreq = school.freq/nrow(painters)
barplot(school.freq)
colors=c("blue","red","green","yellow","violet","orange","cyan")
lot(school.freq,col=colors)
tapply(painters$Composition,painters$School,mean)
duration=faithful$eruptions
range(duration)
breaks=seq(1.5,5,5,by=1.5)
duration.cut=cut(duration,breaks,right=FALSE)
duration.freq=table(duration.cut)
breaks=seq(1.5,5,5,by=1.5)
breaks=seq(1.5,5,by=1.5)
duration.cut=cut(duration,breaks,right=FALSE)
duration.freq=table(duration.cut)
duration.cumfreq=cumsum(duration.freq)
barplot(duration.cumfreq,col=colors)
hist(duration,right=FALSE)
hist(duration,right=TRUE)
FALSE
hist(duration,right=FALSE)
hist(duration,right=TRUE)
hist(duration,right=TRUE)
hist(duration,right=FALSE)
knitr::opts_chunk$set(echo = TRUE)
sales.facebook.model = lm(marketing$sales ~ marketing$facebook)
library(datarium)
library(ggplot2)
ggplot(marketing, aes(x=facebook, y=sales)) + geom_point() + geom_smooth(method='lm', se=FALSE)
ggplot(marketing, aes(x=youtube, y=sales)) + geom_point() + geom_smooth(method='lm', se=FALSE)
ggplot(marketing, aes(x=newspaper, y=sales)) + geom_point() + geom_smooth(method='lm', se=FALSE)
facebook.sales.correlation <- cor(marketing$facebook, marketing$sales)
cat("Correlation between Facebook and Sales = ", facebook.sales.correlation, "\n")
youtube.sales.correlation <- cor(marketing$youtube, marketing$sales)
cat("Correlation between YouTube and Sales = ", youtube.sales.correlation, "\n")
newspaper.sales.correlation <- cor(marketing$newspaper, marketing$sales)
cat("Correlation between Newspaper and Sales = ", newspaper.sales.correlation, "\n")
sales.facebook.model = lm(marketing$sales ~ marketing$facebook)
summary(sales.facebook.model)
sales.youtube.model = lm(marketing$sales ~ marketing$youtube)
summary(sales.youtube.model)
sales.newspaper.model = lm(marketing$sales ~ marketing$newspaper)
summary(sales.newspaper.model)
predictibility <- c(predict(sales.facebook.model), predict(sales.youtube.model), predict(sales.newspaper.model))
model_names <- c("Facebook", "Youtube", "Newspaper")
cat("Most predictive model to least predictive model: ", model_names[order(predictibility, decreasing = TRUE)])
predict(sales.facebook.model)
class(predict(sales.facebook.model))
typeof(predict(sales.facebook.model))
sales.facebook.model = lm(marketing$sales ~ marketing$facebook)
summary(sales.facebook.model)
sales.youtube.model = lm(marketing$sales ~ marketing$youtube)
summary(sales.youtube.model)
sales.newspaper.model = lm(marketing$sales ~ marketing$newspaper)
summary(sales.newspaper.model)
predictibility <- c(predict(sales.facebook.model), predict(sales.youtube.model), predict(sales.newspaper.model))
model_names <- c("Facebook", "Youtube", "Newspaper")
cat("Most predictive model to least predictive model: ", na.omit(model_names[order(
predictibility, decreasing = TRUE))])
sales.facebook.model = lm(marketing$sales ~ marketing$facebook)
summary(sales.facebook.model)
sales.youtube.model = lm(marketing$sales ~ marketing$youtube)
summary(sales.youtube.model)
sales.newspaper.model = lm(marketing$sales ~ marketing$newspaper)
summary(sales.newspaper.model)
predictibility <- c(predict(sales.facebook.model), predict(sales.youtube.model), predict(sales.newspaper.model))
model_names <- c("Facebook", "Youtube", "Newspaper")
cat("Most predictive model to least predictive model: ", na.omit(model_names[order(
predictibility, decreasing = TRUE)])
sales.facebook.model = lm(marketing$sales ~ marketing$facebook)
summary(sales.facebook.model)
sales.youtube.model = lm(marketing$sales ~ marketing$youtube)
summary(sales.youtube.model)
sales.newspaper.model = lm(marketing$sales ~ marketing$newspaper)
summary(sales.newspaper.model)
predictibility <- c(predict(sales.facebook.model), predict(sales.youtube.model), predict(sales.newspaper.model))
model_names <- c("Facebook", "Youtube", "Newspaper")
cat("Most predictive model to least predictive model: ", na.omit(model_names[order(
predictibility, decreasing = TRUE)]))
sales.facebook.model = lm(marketing$sales ~ marketing$facebook)
summary(sales.facebook.model)
sales.youtube.model = lm(marketing$sales ~ marketing$youtube)
summary(sales.youtube.model)
sales.newspaper.model = lm(marketing$sales ~ marketing$newspaper)
summary(sales.newspaper.model)
predictibility <- c(predict(sales.facebook.model), predict(sales.youtube.model), predict(sales.newspaper.model))
model_names <- c("Facebook", "Youtube", "Newspaper")
cat("Least predictive model to most predictive model: ", na.omit(model_names[order(
predictibility, decreasing = TRUE)]))
knitr::opts_chunk$set(echo = TRUE)
library(datarium)
library(ggplot2)
ggplot(marketing, aes(x=facebook, y=sales)) + geom_point() + geom_smooth(method='lm', se=FALSE)
ggplot(marketing, aes(x=youtube, y=sales)) + geom_point() + geom_smooth(method='lm', se=FALSE)
ggplot(marketing, aes(x=newspaper, y=sales)) + geom_point() + geom_smooth(method='lm', se=FALSE)
facebook.sales.correlation <- cor(marketing$facebook, marketing$sales)
cat("Correlation between Facebook and Sales = ", facebook.sales.correlation, "\n")
youtube.sales.correlation <- cor(marketing$youtube, marketing$sales)
cat("Correlation between YouTube and Sales = ", youtube.sales.correlation, "\n")
newspaper.sales.correlation <- cor(marketing$newspaper, marketing$sales)
cat("Correlation between Newspaper and Sales = ", newspaper.sales.correlation, "\n")
sales.facebook.model = lm(marketing$sales ~ marketing$facebook)
summary(sales.facebook.model)
sales.youtube.model = lm(marketing$sales ~ marketing$youtube)
summary(sales.youtube.model)
sales.newspaper.model = lm(marketing$sales ~ marketing$newspaper)
summary(sales.newspaper.model)
predictibility <- c(predict(sales.facebook.model), predict(sales.youtube.model), predict(sales.newspaper.model))
model_names <- c("Facebook", "Youtube", "Newspaper")
cat("Least predictive model to most predictive model: ", na.omit(model_names[order(
predictibility, decreasing = TRUE)]))
sales.facebook.model = lm(marketing$sales ~ marketing$facebook)
summary(sales.facebook.model)
sales.youtube.model = lm(marketing$sales ~ marketing$youtube)
summary(sales.youtube.model)
sales.newspaper.model = lm(marketing$sales ~ marketing$newspaper)
summary(sales.newspaper.model)
predictibility <- c(mean(predict(sales.facebook.model)), mean(predict(sales.youtube.model)),
mean(predict(sales.newspaper.model)))
model_names <- c("Facebook", "Youtube", "Newspaper")
cat("Least predictive model to most predictive model: ", model_names[order(
predictibility, decreasing = TRUE)])
knitr::opts_chunk$set(echo = TRUE)
earthquakes <- read.csv("brake.csv")
View(earthquakes)
names(earthquakes)
earthquakes$P1.P2
View(earthquakes)
library(MASS)
View(quakes)
mtcars
boxplot(mtcyl, data=mtcars,
#xlab = "Years: 1994-99", ylab = "Construction Costs",
main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = rainbow(length(construction))))
mtcyl <- as.factor(mtcars$cyl)
boxplot(mtcyl, data=mtcars,
#xlab = "Years: 1994-99", ylab = "Construction Costs",
main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = rainbow(length(construction))))
boxplot(mtcyl, data=mtcars,
#xlab = "Years: 1994-99", ylab = "Construction Costs",
main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = rainbow(length(mtcyl))))
mtcyl <- as.factor(mtcars$cyl)
boxplot(mtcyl, data=mtcars,
#xlab = "Years: 1994-99", ylab = "Construction Costs",
main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = rainbow(length(mtcyl))))
boxplot(mtcyl, data=mtcars,
#xlab = "Years: 1994-99", ylab = "Construction Costs",
main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = rainbow(length(mtcyl)))
boxplot(mtcars$cyl, data=mtcars,
#xlab = "Years: 1994-99", ylab = "Construction Costs",
main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = rainbow(length(mtcyl)))
boxplot(mtcars$cyl, data=mtcars,
ylab = "Cylinders",
main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = rainbow(length(mtcyl)))
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth))
library(MASS)
library(ggplot2)
qdepth <- quakes$depth
qmag <- quakes$mag
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth))
library(MASS)
library(ggplot2)
qdepth <- quakes$depth
qmag <- quakes$mag
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth)) + facet_wrap(~mag)
mtcyl <- as.factor(mtcars$cyl)
boxplot(mpg ~ mtcyl, data=mtcars,
ylab = "Cylinders",
main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = rainbow(length(mtcyl)))
mtcyl <- as.factor(mtcars$cyl)
boxplot(mpg ~ mtcyl, data=mtcars,
ylab = "Cylinders",
main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = c("red", "blue", "green"))
mtcyl <- as.factor(mtcars$cyl)
boxplot(mpg ~ mtcyl, data=mtcars,
xlab = "Cylinders",
ylab = "Miles per Galleon",
main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = c("red", "blue", "green"))
mtcyl <- as.factor(mtcars$cyl)
boxplot(mpg ~ mtcyl, data=mtcars,
xlab = "Cylinders",
ylab = "Highway Mileage (Miles per Galleon)",
main = "Boxplot of Highway Mileage for different Cylinders",
notch = FALSE,
varwidth = TRUE,
col = c("red", "blue", "green"))
brake <- read.csv("brake.csv")
plot(density(brake$))
brake <- read.csv("brake.csv")
brake <- read.csv("brake.csv")
plot(density(brake$P1.P2x))
plot(density(brake$P1.P2))
plot(density(brake$P1.P2), main = "Density Plot of Total Time Required To Press The Brake")
qqnorm(brake$Latency_P1)
qqnorm(brake$Latency_P1, main = "Normal Plot of Time Needed to Step on Brake Pedal after a Stimulus")
qqnorm(brake$Latency_P1, ylab = "Time Needed", main = "Normal Plot of Time Needed to Step on Brake Pedal after a Stimulus")
qqnorm(brake$Latency_P1, main = "Normal Plot of Time Needed to Step on Brake Pedal after a Stimulus")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy))
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mtcyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy)) + geom_label(x = "City")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mtcyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy)) + geom_label(aes(x = "City", y = ""))
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mtcyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy)) + geom_label(aes(x = "City", y = "Highway"))
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mtcyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy)) + geom_label(aes(x = "City", y = "Highway", col = mtcyl))
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy)) + xlab("Mileage in City") = ylab("Mileage on Highways") + ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy)) + xlab("Mileage in City") + ylab("Mileage on Highways") + ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) + xlab("Mileage in City") + ylab("Mileage on Highways") + ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
ggplot(data=mpg) + geom_point(aes(x = mtcty, y = hwy, color = mtcyl)) +
geom_jitter(data = mpg, aes(x = mtcty, y = hwy, color = mtcyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
mtcyl <- as.factor(mtcars$cyl)
boxplot(mpg ~ mtcyl, data=mtcars,
xlab = "Cylinders",
ylab = "Highway Mileage (Miles per Galleon)",
main = "Boxplot of Highway Mileage for different Cylinders",
notch = FALSE,
varwidth = TRUE,
col = c("red", "blue", "green"))
brake <- read.csv("brake.csv")
plot(density(brake$P1.P2), main = "Density Plot of Total Time Required To Press The Brake")
qqnorm(brake$Latency_P1, main = "Normal Plot of Time Needed to Step on Brake Pedal after a Stimulus")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
ggplot(data=mpg) + geom_point(aes(x = mtcty, y = hwy, color = mtcyl)) +
geom_jitter(data = mpg, aes(x = mtcty, y = hwy, color = mtcyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mtcyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mtcyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mtcyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mtcyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mtcars) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpg$cyl <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
library(MASS)
library(ggplot2)
qdepth <- quakes$depth
qmag <- quakes$mag
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth)) + facet_wrap(~mag) +
geom_tile("Location Earthquakes: Depth and Magnitude based plot")
library(MASS)
library(ggplot2)
qdepth <- quakes$depth
qmag <- quakes$mag
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth)) + facet_wrap(~mag) +
geom_tile("Location Earthquakes: Depth and Magnitude based plot")
library(MASS)
library(ggplot2)
qdepth <- quakes$depth
qmag <- quakes$mag
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth)) + facet_wrap(~mag) +
geom_title("Location Earthquakes: Depth and Magnitude based plot")
library(MASS)
library(ggplot2)
qdepth <- quakes$depth
qmag <- quakes$mag
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth)) + facet_wrap(~mag) +
ggtitle("Location Earthquakes: Depth and Magnitude based plot")
mtcarsCylFactor <- as.factor(mtcars$cyl)
boxplot(mpg ~ mtcarsCylFactor, data=mtcars,
xlab = "Cylinders",
ylab = "Highway Mileage (Miles per Galleon)",
main = "Boxplot of Highway Mileage for different Cylinders",
notch = FALSE,
varwidth = TRUE,
col = c("red", "blue", "green"))
brake <- read.csv("brake.csv")
plot(density(brake$P1.P2), main = "Density Plot of Total Time Required To Press The Brake")
qqnorm(brake$Latency_P1, main = "Normal Plot of Time Needed to Step on Brake Pedal after a Stimulus")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
shiny::runApp('Desktop/FDA/Project')
shiny::runApp('Desktop/FDA/Project')
shiny::runApp('Desktop/FDA/Project')
shiny::runApp('Desktop/FDA/Project')
shiny::runApp('Desktop/FDA/Project')
getwd()
setwd('Desktop/FDA/Project')
getwd()
runApp()
