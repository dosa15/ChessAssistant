main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = rainbow(length(mtcyl)))
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth))
library(MASS)
library(ggplot2)
qdepth <- quakes$depth
qmag <- quakes$mag
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth))
library(MASS)
library(ggplot2)
qdepth <- quakes$depth
qmag <- quakes$mag
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth)) + facet_wrap(~mag)
mtcyl <- as.factor(mtcars$cyl)
boxplot(mpg ~ mtcyl, data=mtcars,
ylab = "Cylinders",
main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = rainbow(length(mtcyl)))
mtcyl <- as.factor(mtcars$cyl)
boxplot(mpg ~ mtcyl, data=mtcars,
ylab = "Cylinders",
main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = c("red", "blue", "green"))
mtcyl <- as.factor(mtcars$cyl)
boxplot(mpg ~ mtcyl, data=mtcars,
xlab = "Cylinders",
ylab = "Miles per Galleon",
main = "Boxplot of Cylinders",
notch = FALSE,
varwidth = TRUE,
col = c("red", "blue", "green"))
mtcyl <- as.factor(mtcars$cyl)
boxplot(mpg ~ mtcyl, data=mtcars,
xlab = "Cylinders",
ylab = "Highway Mileage (Miles per Galleon)",
main = "Boxplot of Highway Mileage for different Cylinders",
notch = FALSE,
varwidth = TRUE,
col = c("red", "blue", "green"))
brake <- read.csv("brake.csv")
plot(density(brake$))
brake <- read.csv("brake.csv")
brake <- read.csv("brake.csv")
plot(density(brake$P1.P2x))
plot(density(brake$P1.P2))
plot(density(brake$P1.P2), main = "Density Plot of Total Time Required To Press The Brake")
qqnorm(brake$Latency_P1)
qqnorm(brake$Latency_P1, main = "Normal Plot of Time Needed to Step on Brake Pedal after a Stimulus")
qqnorm(brake$Latency_P1, ylab = "Time Needed", main = "Normal Plot of Time Needed to Step on Brake Pedal after a Stimulus")
qqnorm(brake$Latency_P1, main = "Normal Plot of Time Needed to Step on Brake Pedal after a Stimulus")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy))
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mtcyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy)) + geom_label(x = "City")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mtcyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy)) + geom_label(aes(x = "City", y = ""))
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mtcyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy)) + geom_label(aes(x = "City", y = "Highway"))
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mtcyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy)) + geom_label(aes(x = "City", y = "Highway", col = mtcyl))
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy)) + xlab("Mileage in City") = ylab("Mileage on Highways") + ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy)) + xlab("Mileage in City") + ylab("Mileage on Highways") + ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) + geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) + xlab("Mileage in City") + ylab("Mileage on Highways") + ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
ggplot(data=mpg) + geom_point(aes(x = mtcty, y = hwy, color = mtcyl)) +
geom_jitter(data = mpg, aes(x = mtcty, y = hwy, color = mtcyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
mtcyl <- as.factor(mtcars$cyl)
boxplot(mpg ~ mtcyl, data=mtcars,
xlab = "Cylinders",
ylab = "Highway Mileage (Miles per Galleon)",
main = "Boxplot of Highway Mileage for different Cylinders",
notch = FALSE,
varwidth = TRUE,
col = c("red", "blue", "green"))
brake <- read.csv("brake.csv")
plot(density(brake$P1.P2), main = "Density Plot of Total Time Required To Press The Brake")
qqnorm(brake$Latency_P1, main = "Normal Plot of Time Needed to Step on Brake Pedal after a Stimulus")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
ggplot(data=mpg) + geom_point(aes(x = mtcty, y = hwy, color = mtcyl)) +
geom_jitter(data = mpg, aes(x = mtcty, y = hwy, color = mtcyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mtcyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mtcyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mtcyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mtcyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mtcars) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpg$cyl <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
library(MASS)
library(ggplot2)
qdepth <- quakes$depth
qmag <- quakes$mag
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth)) + facet_wrap(~mag) +
geom_tile("Location Earthquakes: Depth and Magnitude based plot")
library(MASS)
library(ggplot2)
qdepth <- quakes$depth
qmag <- quakes$mag
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth)) + facet_wrap(~mag) +
geom_tile("Location Earthquakes: Depth and Magnitude based plot")
library(MASS)
library(ggplot2)
qdepth <- quakes$depth
qmag <- quakes$mag
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth)) + facet_wrap(~mag) +
geom_title("Location Earthquakes: Depth and Magnitude based plot")
library(MASS)
library(ggplot2)
qdepth <- quakes$depth
qmag <- quakes$mag
ggplot(quakes) + geom_point(aes(x = long, y = lat, col = depth)) + facet_wrap(~mag) +
ggtitle("Location Earthquakes: Depth and Magnitude based plot")
mtcarsCylFactor <- as.factor(mtcars$cyl)
boxplot(mpg ~ mtcarsCylFactor, data=mtcars,
xlab = "Cylinders",
ylab = "Highway Mileage (Miles per Galleon)",
main = "Boxplot of Highway Mileage for different Cylinders",
notch = FALSE,
varwidth = TRUE,
col = c("red", "blue", "green"))
brake <- read.csv("brake.csv")
plot(density(brake$P1.P2), main = "Density Plot of Total Time Required To Press The Brake")
qqnorm(brake$Latency_P1, main = "Normal Plot of Time Needed to Step on Brake Pedal after a Stimulus")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = rainbow(length(mpgCylFactor)))) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as an integer
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = cyl)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = cyl)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
# CYL variable as a factor
mpgCylFactor <- as.factor(mpg$cyl)
ggplot(data=mpg) + geom_point(aes(x = cty, y = hwy, color = mpgCylFactor)) +
geom_jitter(data = mpg, aes(x = cty, y = hwy, color = mpgCylFactor)) +
xlab("Mileage in City") + ylab("Mileage on Highways") +
ggtitle("Fuel Economy for Popular Cars")
shiny::runApp('Desktop/FDA/Project')
shiny::runApp('Desktop/FDA/Project')
shiny::runApp('Desktop/FDA/Project')
setwd('Desktop/FDA/Project')
runApp()
setwd("~/Desktop/FDA/Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#setwd("D:/college/datavisualization/project/ChessAssistant/")
chess<-read.csv("./CleanedChessDataset.csv")
tempdf=data.frame(sno=c(1:108),moves= chess$Num.Moves, colour=chess$Winner)
tempdf
#
#library(plotly)
#bubbleplot <-  plot_ly(tempdf,x=,y=~sno,text=~2, size=~2,color = ~colour,sizes=c(10,50), marker= list(opacity= 0.7,sizemode = "diameter"))
#bubbleplot<-bubbleplot%>%layout
#bubbleplot
library(ggplot2)
ggplot(tempdf, aes(x = sno, y = moves)) +
geom_point(aes(color = colour, size = moves), alpha = 0.5) +
scale_color_manual(values = c("#AA4371", "#E7B800", "#FC4E07")) +
scale_size(range = c(1, 13)) + # Adjust the range of points size
theme_set(theme_bw() + theme(legend.position = "bottom"))
#setwd("D:/college/datavisualization/project/ChessAssistant/")
chess<-read.csv("./CleanedChessDataset.csv")
#setwd("D:/college/datavisualization/project/ChessAssistant/")
chess<-read.csv("./CleanedChessDataset.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("rchess")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data <- read.csv("games/games.csv")
data
data <- read.csv('CleaningScript/games/games.csv')
print(data)
chessData<-read.csv("ChessDataset.csv")
chessData
data <- read.csv('games/games.csv')
print(data)
source("E:/sem5/Project/ChessAssistantGithub/ChessAssistant/CleaningScript/clean2.R", echo=TRUE)
players <- c("Atul17", "dosa15", "manoghn");
print(players[1])
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("plumber")
runApp()
pr()
runApp()
library(plumber)
runApp()
runApp()
runApp()
runApp()
>>>>>>> c3ed7bce0b738b45530f7ddf6b8aa1f7309847f8
shiny::runApp()
install.packages("stockfish")
install.packages("stockfish")
# library(stockfish)
# library(chess)
# library(bigchess)
# library(rchess)
# require(magrittr)
#
# bestmovepredict <- function(moves){
#
#   movesaf<- strsplit(moves,split = ",")
#   print(movesaf)
#   initmoves<-c()
#   new_game<-Chess$new()
#   bestmoves=c()
#   playermoves=c()
#
#
#
#   for (i in 1:length(movesaf[[1]])) {
#     if(i<5){
#       new_game$move(movesaf[[1]][i])
#       bestmoves<- c(bestmoves,movesaf[[1]][i])
#       playermoves<-c(playermoves,movesaf[[1]][i])
#     }
#     else{
#       new_game$move(movesaf[[1]][i])
#       engine<- fish$new()
#       engine$process
#       engine$position(new_game$fen())
#       m<-engine$go()
#       if(m!="bestmove (none)"){
#         m<-substr(m,10,13)
#         m<-lan2san(m)
#       }
#       else{
#         break
#       }
#
#       bestmoves<- c(bestmoves,m)
#       playermoves<-c(playermoves,movesaf[[1]][i])
#       engine$quit()
#     }
#   }
#   #print(bestmoves)
#   #print(playermoves)
#   countbest=0
#   for (i in 5:length(bestmoves)) {
#     #ap<-analyze_position(engine = "C:/Users/rohit/Downloads/stockfish_14.1_win_x64_avx2/stockfish_14.1_win_x64_avx2.exe",san = m,depth= 6)
#     ap <- analyze_position(engine = "C:/Users/atuls/Downloads/stockfish_14.1_win_x64_avx2/stockfish_14.1_win_x64_avx2.exe", san = m, depth = 6)
#     print(ap$score)
#     if(playermoves[i]==substr(bestmoves[i],4,nchar(bestmoves[i]))){
#       # print(substr(bestmoves[i],4,nchar(bestmoves[i])))
#       #print(i)
#       countbest=countbest+1
#     }
#   }
#   # print(countbest)
#   countworst= length(playermoves)-countbest
#   bvsw<-c(countbest,countworst)
#   barplot(bvsw,names.arg=c("best moves", "worst moves"),xlab = "Moves type", ylab = "Count", main = "Bargraph showing best moves vs worst moves in a game of chess")
# }
# s="e4,e5,Nf3,Nc6,Nc3,d6,d4,b5,dxe5,dxe5,Nxb5,a6,Nxe5,Nxe5,Qxd8+,Kxd8,Bf4,Ng4,f3,Bb4+,c3,Ne3,cxb4,Nc2+,Kd1,Nxa1,Nc3,Be6,Be5,Bxa2,Bxg7,Bb3+,Kd2,Rc8,Bxa6,Nc2,Bxc8,Kxc8,Bxh8,Ne7,Bf6,Nc6,Nd5,N6xb4,Nxb4,c5,Nxc2,Bc4,Rc1,Bb3,Na3,c4,Rxc4+,Bxc4,Nxc4,h5,Ne5,h4,Nxf7,h3,gxh3,Kd7,h4,Ke6,h5,Kxf6,h6,Kxf7,h7,Kg7,b4,Kxh7,b5,Kg8,b6,Kf8,b7,Ke8,b8=Q+,Kd7,Qb6,Kc8,e5,Kd7,f4,Ke7,h4,Kd7,f5,Ke7,h5,Kf7,h6,Kg8,f6,Kh7,e6,Kxh6,e7,Kh7,e8=Q,Kh6,f7+,Kg7,f8=Q+,Kh7,Kc1"
# bestmovepredict(s)
library(stockfish)
library(chess)
library(bigchess)
library(rchess)
require(magrittr)
library(tidyverse)
moves="e4,e5,Nf3,Nc6,Nc3,d6,d4,b5,dxe5,dxe5,Nxb5,a6,Nxe5,Nxe5,Qxd8+,Kxd8,Bf4,Ng4,f3,Bb4+,c3,Ne3,cxb4,Nc2+,Kd1,Nxa1,Nc3,Be6,Be5,Bxa2,Bxg7,Bb3+,Kd2,Rc8,Bxa6,Nc2,Bxc8,Kxc8,Bxh8,Ne7,Bf6,Nc6,Nd5,N6xb4,Nxb4,c5,Nxc2,Bc4,Rc1,Bb3,Na3,c4,Rxc4+,Bxc4,Nxc4,h5,Ne5,h4,Nxf7,h3,gxh3,Kd7,h4,Ke6,h5,Kxf6,h6,Kxf7,h7,Kg7,b4,Kxh7,b5,Kg8,b6,Kf8,b7,Ke8,b8=Q+,Kd7,Qb6,Kc8,e5,Kd7,f4,Ke7,h4,Kd7,f5,Ke7,h5,Kf7,h6,Kg8,f6,Kh7,e6,Kxh6,e7,Kh7,e8=Q,Kh6,f7+,Kg7,f8=Q+,Kh7,Kc1"
movesaf<- strsplit(moves,split = ",")
initmoves<-c()
new_game<-Chess$new()
bestmoves=c()
playermoves=c()
for (i in 1:length(movesaf[[1]])) {
if(i<5){
new_game$move(movesaf[[1]][i])
#bestmoves<- c(bestmoves,movesaf[[1]][i])
playermoves<-c(playermoves,movesaf[[1]][i])
}
else{
new_game$move(movesaf[[1]][i])
engine<- fish$new()
engine$process
engine$position(new_game$fen())
m<-engine$go()
if(m!="bestmove (none)"){
m<-substr(m,10,13)
#m<-lan2san(m)
}
else{
break
}
bestmoves<- c(bestmoves,m)
playermoves<-c(playermoves,movesaf[[1]][i])
engine$quit()
}
}
#print(bestmoves)
for (i in bestmoves) {
print(i)
pp<-analyze_position(engine = "C:/Users/atuls/Downloads/stockfish_14.1_win_x64_avx2/stockfish_14.1_win_x64_avx2.exe",lan = i,depth=10)
print(pp$score)
}
#print(playermoves)
countbest=0
for (i in 5:length(bestmoves)) {
#ap<-analyze_position(engine = "C:/Users/atuls/Downloads/stockfish_14.1_win_x64_avx2/stockfish_14.1_win_x64_avx2.exe",san = m,depth= 6)
#ap$score
if(playermoves[i]==substr(bestmoves[i],4,nchar(bestmoves[i]))){
#print(i)
countbest=countbest+1
}
}
print(countbest)
countworst= length(playermoves)-countbest
bvsw<-c(countbest,countworst)
png("C:/Users/atuls/Downloads/barchart.png")
barplot(bvsw,names.arg=c("best moves", "worst moves"),xlab = "Moves type", ylab = "Count", main = "Bargraph showing best moves vs worst moves in a game of chess")
dev.off()
