<<<<<<< HEAD
print(i)
}
count<-0
temppos<-0
temppsan<-strsplit(temppsan,split = '')
for (i in 1:length(temppsan[[1]])) {
if(temppsan[[1]][i]==' '){
count=count+1
if(count==5){
temppos<-i
break
}
}
}
temppos
browse_opening(FirstTwoMoves,"1. d4 d5 2. Nf3")
count<-0
temppos<-0
tempsplit<-strsplit(temppsan,split = '')
for (i in 1:length(tempsplit[[1]])) {
if(tempsplit[[1]][i]==' '){
count=count+1
if(count==5){
temppos<-i
break
}
}
}
temppos
temppsan<- lan2san(lanstring)
browse_opening(FirstTwoMoves,"1. d4 d5 2. Nf3")
count<-0
temppos<-0
tempsplit<-strsplit(temppsan,split = '')
for (i in 1:length(tempsplit[[1]])) {
if(tempsplit[[1]][i]==' '){
count=count+1
if(count==5){
temppos<-i
break
}
}
}
temppos
substr(temppsan,1,16)
count<-0
temppos<-0
tempsplit<-strsplit(temppsan,split = '')
for (i in 1:length(tempsplit[[1]])) {
if(count==5){
temppos<-i
break
}
if(tempsplit[[1]][i]==' '){
count=count+1
}
}
temppos
library(bigchess)
moves<-"d4,d5,Nf3,Nc6,Bf4,e6,c4,dxc4,e4,Bd6,Bxd6,Qxd6,Bxc4,Qb4+,Nbd2,Qxb2,O-O,Qa3,Nb3,Qb4,Qd3,Bd7,Nc5,b6,Na6,Qe7,Nxc7+,Kd8,Nxa8,Nf6,Rac1,Qd6,e5,Qb8"
movesaf<- strsplit(moves,split = ",")
lanmoves<-c()
for (i in movesaf[[1]]) {
lanmoves<-c(lanmoves,san2lan(i))
}
lanmoves
lanstring<-toString(lanmoves)
lanstring
temppsan<- lan2san(lanstring)
count<-0
temppos<-0
tempsplit<-strsplit(temppsan,split = '')
for (i in 1:length(tempsplit[[1]])) {
if(tempsplit[[1]][i]==' '){
count=count+1
if(count==5){
temppos<-i
break
}
}
}
temppos<-temppos-1
browse_opening(FirstTwoMoves,substr(temppsan,1,temppos))
library(bigchess)
moves<-"d4,d5,e3,b6,g4,c5,Bg2,e6,e4,Nc6,exd5,exd5,c4,Nxd4,cxd5,Bf5,gxf5,Nxf5,d6,Bxd6,Bxa8,Nh4,Bc6+,Kf8,Nh3,Qe8+,Kf1,Qxc6,Ng5,Qg2+,Ke2,Qf3+,Nxf3,Ng2,Nc3,c4,Qxd6+,Ke8,Qe5+,Ne7,Nd4,f6,Qb8+,Kf7,Ne4,Rxb8,Nd6+,Kf8,Rg1,Nf4+,Bxf4,Rd8,Rg2,Ng6,Rag1,Nxf4+,Kf3,g5,Rg4,Ne2,Nxe2,Rxd6,R1g3,Rd3+,Kg2,Rd2,Nc3,Rxb2,Re3,Rxa2,Nxa2,b5,Rge4,a5,Re8+,Kf7,R3e7+,Kg6,Nc3,b4,Rg8+,Kf5,Rxh7,bxc3,Rh5,c2,Rh3,c1=Q,Rf3+,Ke4,Re8+,Kd4,Rxf6,Kc3,Rg8,a4,Rf5,a3,Rfxg5,a2,Ra8,a1=Q,Rga5,Qab2,h4,Qe1,R5a6,Qbxf2+,Kh3,Qh1+,Kg4,Qhxh4#"
movesaf<- strsplit(moves,split = ",")
lanmoves<-c()
for (i in movesaf[[1]]) {
lanmoves<-c(lanmoves,san2lan(i))
}
lanmoves
lanstring<-toString(lanmoves)
lanstring
temppsan<- lan2san(lanstring)
count<-0
temppos<-0
tempsplit<-strsplit(temppsan,split = '')
for (i in 1:length(tempsplit[[1]])) {
if(tempsplit[[1]][i]==' '){
count=count+1
if(count==5){
temppos<-i
break
}
}
}
temppos<-temppos-1
browse_opening(FirstTwoMoves,substr(temppsan,1,temppos))
df<-read.csv(file = "C:/Users/rohit/Downloads/StudentsPerformance_Dataset.xlsx")
df
df<-read.csv(file = "C:/Users/rohit/Downloads/StudentsPerformance_Dataset.csv")
df
df<-read.csv(file = "C:/Users/rohit/Downloads/StudentsPerformance_Dataset.csv")
df
df<-read.csv(file = "C:/Users/rohit/Downloads/StudentsPerformance_Dataset.csv")
df
df<-read.csv(file = "C:/Users/rohit/Downloads/StudentsPerformance_Dataset.csv")
res<- cor.test(df$math.score,df$reading.score,method = "pearson")
res
library(ggpubr)
df<-read.csv(file = "C:/Users/rohit/Downloads/StudentsPerformance_Dataset.csv")
res<- cor.test(df$math.score,df$reading.score,method = "pearson")
res
res$p.value
res$estimate
ggscatter(df,x=df$math.score,y=df$reading.score,add="reg.line",conf.int=TRUE,cor.coef=TRUE,cor.method="pearson",xlab="Maths Score",ylab="Reading Score")
library(ggpubr)
library(ggplot2)
df<-read.csv(file = "C:/Users/rohit/Downloads/StudentsPerformance_Dataset.csv")
res<- cor.test(df$math.score,df$reading.score,method = "pearson")
res
res$p.value
res$estimate
ggscatter(df,x=df$math.score,y=df$reading.score,add="reg.line",conf.int=TRUE,cor.coef=TRUE,cor.method="pearson",xlab="Maths Score",ylab="Reading Score")
library(ggpubr)
library(ggplot2)
df<-read.csv(file = "C:/Users/rohit/Downloads/StudentsPerformance_Dataset.csv")
res<- cor.test(df$math.score,df$reading.score,method = "pearson")
res
res$p.value
res$estimate
ggscatter(df,x="math.score",y="reading.score",add="reg.line",conf.int=TRUE,cor.coef=TRUE,cor.method="pearson",xlab="Maths Score",ylab="Reading Score")
library(ggpubr)
library(ggplot2)
df<-read.csv(file = "C:/Users/rohit/Downloads/StudentsPerformance_Dataset.csv")
res<- cor.test(df$math.score,df$reading.score,method = "pearson")
print("Correlation between Math score and Reading score")
res
res$p.value
res$estimate
ggscatter(df,x="math.score",y="reading.score",add="reg.line",conf.int=TRUE,cor.coef=TRUE,cor.method="pearson",xlab="Maths Score",ylab="Reading Score")
res1<- cor.test(df$math.score,df$writing.score,method = "pearson")
print("Correlation between Writing score and Math score")
res1
res1$p.value
res1$estimate
ggscatter(df,x="math.score",y="writing.score",add="reg.line",conf.int=TRUE,cor.coef=TRUE,cor.method="pearson",xlab="Maths Score",ylab="Reading Score")
res2<- cor.test(df$writing.score,df$reading.score,method = "pearson")
print("Correlation between Writing score and Reading score")
res2
res2$p.value
res2$estimate
ggscatter(df,x="writing.score",y="reading.score",add="reg.line",conf.int=TRUE,cor.coef=TRUE,cor.method="pearson",xlab="Maths Score",ylab="Reading Score")
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
library(ggplot2)
df<-read.csv(file = "C:/Users/rohit/Downloads/StudentsPerformance_Dataset.csv")
res<- cor.test(df$math.score,df$reading.score,method = "pearson")
print("Correlation between Math score and Reading score")
res
res$p.value
res$estimate
ggscatter(df,x="math.score",y="reading.score",add="reg.line",conf.int=TRUE,cor.coef=TRUE,cor.method="pearson",xlab="Maths Score",ylab="Reading Score")
res1<- cor.test(df$math.score,df$writing.score,method = "pearson")
print("Correlation between Writing score and Math score")
res1
res1$p.value
res1$estimate
ggscatter(df,x="math.score",y="writing.score",add="reg.line",conf.int=TRUE,cor.coef=TRUE,cor.method="pearson",xlab="Maths Score",ylab="Reading Score")
res2<- cor.test(df$writing.score,df$reading.score,method = "pearson")
print("Correlation between Writing score and Reading score")
res2
res2$p.value
res2$estimate
ggscatter(df,x="writing.score",y="reading.score",add="reg.line",conf.int=TRUE,cor.coef=TRUE,cor.method="pearson",xlab="Maths Score",ylab="Reading Score")
library(ggpubr)
library(ggplot2)
df<-read.csv(file = "C:/Users/rohit/Downloads/USA_cars_dataset")
library(ggpubr)
library(ggplot2)
df<-read.csv(file = "C:/Users/rohit/Downloads/USA_cars_datasets.csv")
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
library(ggplot2)
df<-read.csv(file = "C:/Users/rohit/Downloads/USA_cars_datasets.csv")
res<- cor.test(df$price,df$year,method = "pearson")
print("Correlation between price and year")
res
res$p.value
res$estimate
ggscatter(df,x="price",y="year",add="reg.line",conf.int=TRUE,cor.coef=TRUE,cor.method="pearson",xlab="Price of cars",ylab="year")
res1<- cor.test(df$price,df$mileage,method = "pearson")
print("Correlation between price and mileage")
res1
res1$p.value
res1$estimate
ggscatter(df,x="price",y="mileage",add="reg.line",conf.int=TRUE,cor.coef=TRUE,cor.method="pearson",xlab="Price of cars",ylab="mileage")
res2<- cor.test(df$year,df$mileage,method = "pearson")
print("Correlation between year and mileage")
res2
res2$p.value
res2$estimate
ggscatter(df,x="year",y="mileage",add="reg.line",conf.int=TRUE,cor.coef=TRUE,cor.method="pearson",xlab="year",ylab="mileage")
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata$Queen,finaldata$Knight,finaldata$Bishop,finaldata$Rook,finaldata$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
barplot(Values, main = "total game insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("topleft", pieces, cex = 0.5, fill =c("red","green","blue","grey","yellow"))
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata$Queen,finaldata$Knight,finaldata$Bishop,finaldata$Rook,finaldata$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("topleft", pieces, cex = 0.5, fill =c("red","green","blue","grey","yellow"))
#setwd("D:/college/datavisualization/project/ChessAssistant/")
chess<-read.csv("./CleanedChessDataset.csv")
tempdf=data.frame(sno=c(1:108),moves= chess$Num.Moves, colour=chess$Winner)
tempdf
#
#library(plotly)
#bubbleplot <-  plot_ly(tempdf,x=,y=~sno,text=~2, size=~2,color = ~colour,sizes=c(10,50), marker= list(opacity= 0.7,sizemode = "diameter"))
#bubbleplot<-bubbleplot%>%layout
#bubbleplot
library(ggplot2)
ggplot(tempdf, aes(x = sno, y = moves)) +
geom_point(aes(color = colour, size = moves), alpha = 0.5) +
scale_color_manual(values = c("#AA4371", "#E7B800", "#FC4E07")) +
scale_size(range = c(1, 13)) + # Adjust the range of points size
theme_set(theme_bw() + theme(legend.position = "bottom"))
install.packages("gganimate")
ggplot(Values,aes(x=pieces,y=Values,fill=pieces))+geom_bar(stat = 'identity')
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata$Queen,finaldata$Knight,finaldata$Bishop,finaldata$Rook,finaldata$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
ggplot(Values,aes(x=pieces,y=Values,fill=pieces))+geom_bar(stat = 'identity')
ggplot(finaldata,aes(x=pieces,y=Values,fill=pieces))+geom_bar(stat = 'identity')
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata$Queen,finaldata$Knight,finaldata$Bishop,finaldata$Rook,finaldata$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
ggplot(finaldata,aes(x=pieces,y=Values,fill=pieces))+geom_bar(stat = 'identity')
library(ggplot2)
library(gganimate)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata$Queen,finaldata$Knight,finaldata$Bishop,finaldata$Rook,finaldata$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
ggplot(finaldata,aes(x=pieces,fill=pieces))+geom_bar(stat = 'identity')
library(ggplot2)
library(gganimate)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata$Queen,finaldata$Knight,finaldata$Bishop,finaldata$Rook,finaldata$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("topleft", pieces, cex = 0.5, fill =c("red","green","blue","grey","yellow"))+theme_bw()+transition_states(frame,transition_length = 2,state_length = 1)+ease_aes('sine-in-out')
anim_save("Barplot animated")
installed.packages(gifski)
installed.packages("gifski")
install.packages("png")
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata$Queen,finaldata$Knight,finaldata$Bishop,finaldata$Rook,finaldata$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("topleft", pieces, cex = 0.5, fill =c("red","green","blue","grey","yellow"))
animate(bargraph, duration = 5, fps = 20, width = 200, height = 200, renderer = gifski_renderer())
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata$Queen,finaldata$Knight,finaldata$Bishop,finaldata$Rook,finaldata$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("topleft", pieces, cex = 0.5, fill =c("red","green","blue","grey","yellow"))
finaldata %>% arrange(Num.Moves)
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
library(tidyverse)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
finaldata %>% arrange(Num.Moves)
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata$Queen,finaldata$Knight,finaldata$Bishop,finaldata$Rook,finaldata$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("topleft", pieces, cex = 0.5, fill =c("red","green","blue","grey","yellow"))
finaldata %>% arrange(Num.Moves)
finaldata1<-pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
finaldata1
finaldata1<-finaldata %>% arrange(Num.Moves)
finaldata1
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
library(tidyverse)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
finaldata1<-finaldata %>% arrange(Num.Moves)
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata1$Queen,finaldata1$Knight,finaldata1$Bishop,finaldata1$Rook,finaldata1$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("topleft", pieces, cex = 0.5, fill =c("red","green","blue","grey","yellow"))
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
library(tidyverse)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
finaldata1<-finaldata %>% arrange(desc(Num.Moves))
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata1$Queen,finaldata1$Knight,finaldata1$Bishop,finaldata1$Rook,finaldata1$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("topleft", pieces, cex = 0.5, fill =c("red","green","blue","grey","yellow"))
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
library(tidyverse)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
finaldata1<-finaldata %>% arrange(desc(Num.Moves))
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata1$Queen,finaldata1$Knight,finaldata1$Bishop,finaldata1$Rook,finaldata1$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("topright", pieces, cex = 0.5, fill =c("red","green","blue","grey","yellow"))
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
library(tidyverse)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
finaldata1<-finaldata %>% arrange(desc(Num.Moves))
pieces <- c("Queen","Knight","Bishop","Rook")
games<-c(1:108)
Values <- matrix(c(finaldata1$Queen,finaldata1$Knight,finaldata1$Bishop,finaldata1$Rook), nrow = 4, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("topright", pieces, cex = 0.5, fill =c("red","green","blue","grey"))
withoutpawns<-df[c('Num.Moves', 'Queen', 'Knight','Bishop','Rook')]
withoutpawns<-finaldata[c('Num.Moves', 'Queen', 'Knight','Bishop','Rook')]
withoutpawns
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
library(tidyverse)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
withoutpawns<-finaldata[c('Num.Moves', 'Queen', 'Knight','Bishop','Rook')]
finaldatawithoutpawn1<-withoutpawns %>% arrange(desc(Num.Moves))
pieces <- c("Queen","Knight","Bishop","Rook")
games<-c(1:108)
Values <- matrix(c(finaldata1$Queen,finaldata1$Knight,finaldata1$Bishop,finaldata1$Rook), nrow = 4, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("topright", pieces, cex = 0.5, fill =c("red","green","blue","grey"))
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
library(tidyverse)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
withoutpawns<-finaldata[c('Num.Moves', 'Queen', 'Knight','Bishop','Rook')]
finaldatawithoutpawn1<-withoutpawns %>% arrange(desc(Num.Moves))
pieces <- c("Queen","Knight","Bishop","Rook")
games<-c(1:108)
Values <- matrix(c(finaldatawithoutpawn1$Queen,finaldatawithoutpawn1$Knight,finaldatawithoutpawn1$Bishop,finaldatawithoutpawn1$Rook), nrow = 4, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("topright", pieces, cex = 0.5, fill =c("red","green","blue","grey"))
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
library(tidyverse)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
withoutpawns<-finaldata[c('Num.Moves', 'Queen', 'Knight','Bishop','Rook')]
finaldatawithoutpawn1<-withoutpawns %>% arrange(desc(Num.Moves))
pieces <- c("Queen","Knight","Bishop","Rook")
games<-c(1:108)
Values <- matrix(c(finaldatawithoutpawn1$Queen,finaldatawithoutpawn1$Knight,finaldatawithoutpawn1$Bishop,finaldatawithoutpawn1$Rook), nrow = 4, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey"))
legend("topright", pieces, cex = 0.5, fill =c("red","green","blue","grey"))
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
library(tidyverse)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
withoutpawns<-finaldata[c('Num.Moves', 'Queen', 'Knight','Bishop','Rook')]
finaldatawithoutpawn1<-withoutpawns %>% arrange(desc(Num.Moves))
pieces <- c("Queen","Knight","Bishop","Rook")
games<-c(1:108)
Values <- matrix(c(finaldatawithoutpawn1$Queen,finaldatawithoutpawn1$Knight,finaldatawithoutpawn1$Bishop,finaldatawithoutpawn1$Rook), nrow = 4, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey"))
legend("topright", pieces, cex = 0.5, fill =c("red","green","blue","grey"))
finaldatawithoutpawn1<-withoutpawns %>% arrange(desc(Num.Moves))
finaldatawithoutpawn1
withoutpawns$totalmoves=withoutpawns$Queen+withoutpawns$Knight+withoutpawns$Bishop+withoutpawns$Rook
withoutpawns
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
library(tidyverse)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
withoutpawns<-finaldata[c('Queen','Knight','Bishop','Rook')]
withoutpawns$totalmoves=withoutpawns$Queen+withoutpawns$Knight+withoutpawns$Bishop+withoutpawns$Rook
finaldatawithoutpawn1<-withoutpawns %>% arrange(desc(totalmoves))
pieces <- c("Queen","Knight","Bishop","Rook")
games<-c(1:108)
Values <- matrix(c(finaldatawithoutpawn1$Queen,finaldatawithoutpawn1$Knight,finaldatawithoutpawn1$Bishop,finaldatawithoutpawn1$Rook), nrow = 4, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey"))
legend("topright", pieces, cex = 0.5, fill =c("red","green","blue","grey"))
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
library(tidyverse)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
finaldata1<-finaldata %>% arrange(desc(Num.Moves))
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata1$Queen,finaldata1$Knight,finaldata1$Bishop,finaldata1$Rook,finaldata1$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("toprright", pieces, cex = 0.5, fill =c("red","green","blue","grey","yellow"))
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
library(tidyverse)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
finaldata1<-finaldata %>% arrange(desc(Num.Moves))
pieces <- c("Queen","Knight","Bishop","Rook","Pawn")
games<-c(1:108)
Values <- matrix(c(finaldata1$Queen,finaldata1$Knight,finaldata1$Bishop,finaldata1$Rook,finaldata1$Pawn), nrow = 5, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey","yellow"))
legend("topright", pieces, cex = 0.5, fill =c("red","green","blue","grey","yellow"))
library(ggplot2)
library(gganimate)
library(gifski)
library(png)
library(tidyverse)
finaldata<-read.csv("D:/college/datavisualization/project/ChessAssistant/clean_ds_post_move_analysis.csv")
#finaldata<-head(finaldata,10)
finaldata
withoutpawns<-finaldata[c('Queen','Knight','Bishop','Rook')]
withoutpawns$totalmoves=withoutpawns$Queen+withoutpawns$Knight+withoutpawns$Bishop+withoutpawns$Rook
finaldatawithoutpawn1<-withoutpawns %>% arrange(desc(totalmoves))
pieces <- c("Queen","Knight","Bishop","Rook")
games<-c(1:108)
Values <- matrix(c(finaldatawithoutpawn1$Queen,finaldatawithoutpawn1$Knight,finaldatawithoutpawn1$Bishop,finaldatawithoutpawn1$Rook), nrow = 4, ncol = 108, byrow = TRUE)
bargraph<-barplot(Values, main = "Dataset insights",names.arg = games, xlab = "games", ylab = "moves count", col = c("red","green","blue","grey"))
legend("topright", pieces, cex = 0.5, fill =c("red","green","blue","grey"))
=======
openings <- openings[openings$Frequency > 10,]
# openings$Percentage <- as.numeric(openings$Frequency/sum(openings$Frequency)) * 100
openings$Current <- FALSE
rownames(openings) <- 1:nrow(openings)
openings[openings$Name == playerOpening,]$Current <- TRUE
openingIndex <- as.integer(rownames(openings[openings$Name == playerOpening,]))
openings[openings$Name == "Queen",]$Name <- "Queen's Pawn"
openings[openings$Name == "King",]$Name <- "King's Pawn"
openings[openings$Name == "Ruy",]$Name <- "Ruy Lopez"
# openings$Color = gradient_n_pal(sequential_hcl(6, palette = c("Red-Yellow")))
# pie(openings$Percentage, labels = openings$Name)
# pie(openings$Percentage, labels = openings$Name, las=2, xlab="Opening", cex.names=7)
# pie(openings,las =2,cex.names = 0.7,xlab = Name, ylab = Percentage)
p1 = ggplot(openings, aes(area = Frequency, fill = Frequency, label = Name, subgroup = Current)) +
geom_treemap(layout="srow") +
geom_treemap_subgroup_border(colour=rgb(70/255, 200/255, 30/255), layout="srow") +
geom_treemap_subgroup_text(size = 20, alpha = 0, angle = 90, layout="srow", padding.x = grid::unit(10, "mm"), padding.y = grid::unit(10, "mm"),) +
geom_treemap_text(colour = "white", place = "centre", layout="srow", grow = TRUE) +
# scale_fill_manual(c(rep("Blue", openingIndex-1), "Green", rep("Blue", nrow(openings)-openingIndex)))
scale_color_brewer()
print(formatted_moves)
print(playerOpening)
save_loc <- "treemap.png"
print(save_loc)
ggsave(save_loc, plot = p1)
}
graph5("e4,e5,Nf3,Nc6")
graph5 <- function(s) {
playerOpening = "You played a novel game!"
data("chessopenings")
chessopenings <- data.frame(chessopenings)
moves <- strsplit(s, split = ",")[[1]]
format_moves <- function(moves) {
formatted_moves <- ""
for(m in 1:ifelse(length(moves) > 7, 7, length(moves))) {
mno <- as.integer(m/2 + 1)
if (m %% 2 != 0)
formatted_moves <- paste(c(formatted_moves, " ", as.character(mno), ". ", moves[m]), collapse = "")
else
formatted_moves <- paste(c(formatted_moves, " ", moves[m]), collapse = "")
}
formatted_moves <- substr(formatted_moves, 2, nchar(formatted_moves))
return(formatted_moves)
}
formatted_moves <- format_moves(moves)
while(length(moves) > 0) {
if(nrow(chessopenings[chessopenings$pgn == formatted_moves,]) > 0) {
playerOpening = chessopenings[chessopenings$pgn == formatted_moves,]$name
break
}
moves <- moves[1:length(moves)-1]
formatted_moves <-format_moves(moves)
}
unique_openings <- c("Alekhine", "Benko/Volga", "Benoni", "Bird", "Bishop", "Black Knights", "Blumenfeld", "Budapest", "Caro-Kann", "Catalan", "Center", "Colle", "Czech", "Danish", "Dutch", "Elephant", "English", "Evans", "Falkbeer", "Fianchetto", "Four Knights", "French", "Giuoco", "Goring", "Grunfeld", "Hungarian", "Italian", "King", "Latvian", "London", "Modern", "Nimzowitsch-Larsen", "Indian", "Open games", "Petroff", "Philidor", "Pirc", "Ponziani", "Queen", "Reti", "Ruy", "Scandinavian", "Scotch", "Sicilian", "Slav", "Tarrasch", "Tartakower", "Three Knights", "Torre", "Trompowsky", "Two Knights", "Unusual", "Veresov", "Vienna")
unique_openings_count <- rep(0, length(unique_openings))
flag <- FALSE
found <- FALSE
for(O in chessopenings[order(chessopenings$name),]$name) {
if(O == playerOpening) flag = TRUE
for(i in 1:length(unique_openings)) {
if(sjmisc::str_contains(O, unique_openings[i])) {
unique_openings_count[i] <- unique_openings_count[i] + 1
if(flag) {
playerOpening <- unique_openings[i]
found <- TRUE
}
}
# if(found) break
}
# if(found) break
}
if(!found) playerOpening <- "Other Openings"
temp_openings <- data.frame(unique_openings, unique_openings_count)
names(temp_openings) <- c("Name", "Frequency")
openings <- temp_openings
openings$Name <- as.character(openings$Name)
openings[nrow(openings)+1,] <- c("Other Openings", sum(openings[openings$Frequency <= 10,]$Frequency))
openings$Frequency <- as.integer(openings$Frequency)
openings <- openings[openings$Frequency > 10,]
# openings$Percentage <- as.numeric(openings$Frequency/sum(openings$Frequency)) * 100
openings$Current <- FALSE
rownames(openings) <- 1:nrow(openings)
openings[openings$Name == playerOpening,]$Current <- TRUE
openingIndex <- as.integer(rownames(openings[openings$Name == playerOpening,]))
openings[openings$Name == "Queen",]$Name <- "Queen's Pawn"
openings[openings$Name == "King",]$Name <- "King's Pawn"
openings[openings$Name == "Ruy",]$Name <- "Ruy Lopez"
# openings$Color = gradient_n_pal(sequential_hcl(6, palette = c("Red-Yellow")))
# pie(openings$Percentage, labels = openings$Name)
# pie(openings$Percentage, labels = openings$Name, las=2, xlab="Opening", cex.names=7)
# pie(openings,las =2,cex.names = 0.7,xlab = Name, ylab = Percentage)
p1 = ggplot(openings, aes(area = Frequency, fill = Frequency, label = Name, subgroup = Current)) +
geom_treemap(layout="srow") +
geom_treemap_subgroup_border(colour=rgb(70/255, 200/255, 30/255), layout="srow") +
geom_treemap_subgroup_text(size = 20, alpha = 0, angle = 90, layout="srow", padding.x = grid::unit(10, "mm"), padding.y = grid::unit(10, "mm"),) +
geom_treemap_text(colour = "white", place = "centre", layout="srow", grow = TRUE) +
# scale_fill_manual(c(rep("Blue", openingIndex-1), "Green", rep("Blue", nrow(openings)-openingIndex)))
scale_color_brewer()
print(formatted_moves)
print(playerOpening)
save_loc <- "treemap.png"
print(save_loc)
ggsave(save_loc, plot = p1)
}
graph5("e4,e5,Nf3,Nc6")
playerOpening
s <- "e4,e5,Nf3,Nc6"
playerOpening = "You played a novel game!"
data("chessopenings")
chessopenings <- data.frame(chessopenings)
moves <- strsplit(s, split = ",")[[1]]
format_moves <- function(moves) {
formatted_moves <- ""
for(m in 1:ifelse(length(moves) > 7, 7, length(moves))) {
mno <- as.integer(m/2 + 1)
if (m %% 2 != 0)
formatted_moves <- paste(c(formatted_moves, " ", as.character(mno), ". ", moves[m]), collapse = "")
else
formatted_moves <- paste(c(formatted_moves, " ", moves[m]), collapse = "")
}
formatted_moves <- substr(formatted_moves, 2, nchar(formatted_moves))
return(formatted_moves)
}
formatted_moves <- format_moves(moves)
while(length(moves) > 0) {
if(nrow(chessopenings[chessopenings$pgn == formatted_moves,]) > 0) {
playerOpening = chessopenings[chessopenings$pgn == formatted_moves,]$name
break
}
moves <- moves[1:length(moves)-1]
formatted_moves <-format_moves(moves)
}
unique_openings <- c("Alekhine", "Benko/Volga", "Benoni", "Bird", "Bishop", "Black Knights", "Blumenfeld", "Budapest", "Caro-Kann", "Catalan", "Center", "Colle", "Czech", "Danish", "Dutch", "Elephant", "English", "Evans", "Falkbeer", "Fianchetto", "Four Knights", "French", "Giuoco", "Goring", "Grunfeld", "Hungarian", "Italian", "King", "Latvian", "London", "Modern", "Nimzowitsch-Larsen", "Indian", "Open games", "Petroff", "Philidor", "Pirc", "Ponziani", "Queen", "Reti", "Ruy", "Scandinavian", "Scotch", "Sicilian", "Slav", "Tarrasch", "Tartakower", "Three Knights", "Torre", "Trompowsky", "Two Knights", "Unusual", "Veresov", "Vienna")
unique_openings_count <- rep(0, length(unique_openings))
flag <- FALSE
found <- FALSE
for(O in chessopenings[order(chessopenings$name),]$name) {
if(O == playerOpening) flag = TRUE
for(i in 1:length(unique_openings)) {
if(sjmisc::str_contains(O, unique_openings[i])) {
unique_openings_count[i] <- unique_openings_count[i] + 1
if(flag) {
playerOpening <- unique_openings[i]
found <- TRUE
}
}
# if(found) break
}
# if(found) break
}
if(!found) playerOpening <- "Other Openings"
playerOpening
temp_openings <- data.frame(unique_openings, unique_openings_count)
names(temp_openings) <- c("Name", "Frequency")
openings <- temp_openings
openings$Name <- as.character(openings$Name)
openings[nrow(openings)+1,] <- c("Other Openings", sum(openings[openings$Frequency <= 10,]$Frequency))
openings$Frequency <- as.integer(openings$Frequency)
openings <- openings[openings$Frequency > 10,]
# openings$Percentage <- as.numeric(openings$Frequency/sum(openings$Frequency)) * 100
openings$Current <- FALSE
playerOpening
openings$Name == playerOpening
if(openings$Name == playerOpening)
print("ok")
if(TRUE %in% (openings$Name == playerOpening))
print("ok")
if(TRUE %in% (openings$Name == "English"))
print("ok")
openings$Name
openings$Current
openings[["Other Openings"]] <- TRUE
openings$Current
openings["Other Openings"] <- TRUE
openings$Current
openings
remove(openings$`Other Openings`)
openings$`Other Openings` <- NULL
openings
openings[["Other Openings"]]["Current"] <- TRUE
openings
openings$`Other Openings` <- NULL
openings["Current"]["Other Openings"] <- TRUE
openings[["Current"]][["Other Openings"]] <- TRUE
graph5 <- function(s) {
playerOpening = "You played a novel game!"
data("chessopenings")
chessopenings <- data.frame(chessopenings)
moves <- strsplit(s, split = ",")[[1]]
format_moves <- function(moves) {
formatted_moves <- ""
for(m in 1:ifelse(length(moves) > 7, 7, length(moves))) {
mno <- as.integer(m/2 + 1)
if (m %% 2 != 0)
formatted_moves <- paste(c(formatted_moves, " ", as.character(mno), ". ", moves[m]), collapse = "")
else
formatted_moves <- paste(c(formatted_moves, " ", moves[m]), collapse = "")
}
formatted_moves <- substr(formatted_moves, 2, nchar(formatted_moves))
return(formatted_moves)
}
formatted_moves <- format_moves(moves)
while(length(moves) > 0) {
if(nrow(chessopenings[chessopenings$pgn == formatted_moves,]) > 0) {
playerOpening = chessopenings[chessopenings$pgn == formatted_moves,]$name
break
}
moves <- moves[1:length(moves)-1]
formatted_moves <-format_moves(moves)
}
unique_openings <- c("Alekhine", "Benko/Volga", "Benoni", "Bird", "Bishop", "Black Knights", "Blumenfeld", "Budapest", "Caro-Kann", "Catalan", "Center", "Colle", "Czech", "Danish", "Dutch", "Elephant", "English", "Evans", "Falkbeer", "Fianchetto", "Four Knights", "French", "Giuoco", "Goring", "Grunfeld", "Hungarian", "Italian", "King", "Latvian", "London", "Modern", "Nimzowitsch-Larsen", "Indian", "Open games", "Petroff", "Philidor", "Pirc", "Ponziani", "Queen", "Reti", "Ruy", "Scandinavian", "Scotch", "Sicilian", "Slav", "Tarrasch", "Tartakower", "Three Knights", "Torre", "Trompowsky", "Two Knights", "Unusual", "Veresov", "Vienna")
unique_openings_count <- rep(0, length(unique_openings))
flag <- FALSE
found <- FALSE
for(O in chessopenings[order(chessopenings$name),]$name) {
if(O == playerOpening) flag = TRUE
for(i in 1:length(unique_openings)) {
if(sjmisc::str_contains(O, unique_openings[i])) {
unique_openings_count[i] <- unique_openings_count[i] + 1
if(flag) {
playerOpening <- unique_openings[i]
found <- TRUE
}
}
# if(found) break
}
# if(found) break
}
if(!found) playerOpening <- "Other Openings"
temp_openings <- data.frame(unique_openings, unique_openings_count)
names(temp_openings) <- c("Name", "Frequency")
openings <- temp_openings
openings$Name <- as.character(openings$Name)
openings[nrow(openings)+1,] <- c("Other Openings", sum(openings[openings$Frequency <= 10,]$Frequency))
openings$Frequency <- as.integer(openings$Frequency)
openings <- openings[openings$Frequency > 10,]
# openings$Percentage <- as.numeric(openings$Frequency/sum(openings$Frequency)) * 100
openings$Current <- FALSE
rownames(openings) <- 1:nrow(openings)
if(TRUE %in% (openings$Name == playerOpening)) {
openings[openings$Name == playerOpening,]$Current <- TRUE
} else {
openings[openings$Name == "Other Openings"]$Current <- TRUE
}
openingIndex <- as.integer(rownames(openings[openings$Name == playerOpening,]))
openings[openings$Name == "Queen",]$Name <- "Queen's Pawn"
openings[openings$Name == "King",]$Name <- "King's Pawn"
openings[openings$Name == "Ruy",]$Name <- "Ruy Lopez"
# openings$Color = gradient_n_pal(sequential_hcl(6, palette = c("Red-Yellow")))
# pie(openings$Percentage, labels = openings$Name)
# pie(openings$Percentage, labels = openings$Name, las=2, xlab="Opening", cex.names=7)
# pie(openings,las =2,cex.names = 0.7,xlab = Name, ylab = Percentage)
p1 = ggplot(openings, aes(area = Frequency, fill = Frequency, label = Name, subgroup = Current)) +
geom_treemap(layout="srow") +
geom_treemap_subgroup_border(colour=rgb(70/255, 200/255, 30/255), layout="srow") +
geom_treemap_subgroup_text(size = 20, alpha = 0, angle = 90, layout="srow", padding.x = grid::unit(10, "mm"), padding.y = grid::unit(10, "mm"),) +
geom_treemap_text(colour = "white", place = "centre", layout="srow", grow = TRUE) +
# scale_fill_manual(c(rep("Blue", openingIndex-1), "Green", rep("Blue", nrow(openings)-openingIndex)))
scale_color_brewer()
print(formatted_moves)
print(playerOpening)
save_loc <- "treemap.png"
print(save_loc)
ggsave(save_loc, plot = p1)
}
graph5("e4,e5,Nf3,Nc6")
graph5 <- function(s) {
playerOpening = "You played a novel game!"
data("chessopenings")
chessopenings <- data.frame(chessopenings)
moves <- strsplit(s, split = ",")[[1]]
format_moves <- function(moves) {
formatted_moves <- ""
for(m in 1:ifelse(length(moves) > 7, 7, length(moves))) {
mno <- as.integer(m/2 + 1)
if (m %% 2 != 0)
formatted_moves <- paste(c(formatted_moves, " ", as.character(mno), ". ", moves[m]), collapse = "")
else
formatted_moves <- paste(c(formatted_moves, " ", moves[m]), collapse = "")
}
formatted_moves <- substr(formatted_moves, 2, nchar(formatted_moves))
return(formatted_moves)
}
formatted_moves <- format_moves(moves)
while(length(moves) > 0) {
if(nrow(chessopenings[chessopenings$pgn == formatted_moves,]) > 0) {
playerOpening = chessopenings[chessopenings$pgn == formatted_moves,]$name
break
}
moves <- moves[1:length(moves)-1]
formatted_moves <-format_moves(moves)
}
unique_openings <- c("Alekhine", "Benko/Volga", "Benoni", "Bird", "Bishop", "Black Knights", "Blumenfeld", "Budapest", "Caro-Kann", "Catalan", "Center", "Colle", "Czech", "Danish", "Dutch", "Elephant", "English", "Evans", "Falkbeer", "Fianchetto", "Four Knights", "French", "Giuoco", "Goring", "Grunfeld", "Hungarian", "Italian", "King", "Latvian", "London", "Modern", "Nimzowitsch-Larsen", "Indian", "Open games", "Petroff", "Philidor", "Pirc", "Ponziani", "Queen", "Reti", "Ruy", "Scandinavian", "Scotch", "Sicilian", "Slav", "Tarrasch", "Tartakower", "Three Knights", "Torre", "Trompowsky", "Two Knights", "Unusual", "Veresov", "Vienna")
unique_openings_count <- rep(0, length(unique_openings))
flag <- FALSE
found <- FALSE
for(O in chessopenings[order(chessopenings$name),]$name) {
if(O == playerOpening) flag = TRUE
for(i in 1:length(unique_openings)) {
if(sjmisc::str_contains(O, unique_openings[i])) {
unique_openings_count[i] <- unique_openings_count[i] + 1
if(flag) {
playerOpening <- unique_openings[i]
found <- TRUE
}
}
# if(found) break
}
# if(found) break
}
if(!found) playerOpening <- "Other Openings"
temp_openings <- data.frame(unique_openings, unique_openings_count)
names(temp_openings) <- c("Name", "Frequency")
openings <- temp_openings
openings$Name <- as.character(openings$Name)
openings[nrow(openings)+1,] <- c("Other Openings", sum(openings[openings$Frequency <= 10,]$Frequency))
openings$Frequency <- as.integer(openings$Frequency)
openings <- openings[openings$Frequency > 10,]
# openings$Percentage <- as.numeric(openings$Frequency/sum(openings$Frequency)) * 100
openings$Current <- FALSE
rownames(openings) <- 1:nrow(openings)
if(TRUE %in% (openings$Name == playerOpening)) {
openings[openings$Name == playerOpening,]$Current <- TRUE
} else {
openings[openings$Name == "Other Openings",]$Current <- TRUE
}
openingIndex <- as.integer(rownames(openings[openings$Name == playerOpening,]))
openings[openings$Name == "Queen",]$Name <- "Queen's Pawn"
openings[openings$Name == "King",]$Name <- "King's Pawn"
openings[openings$Name == "Ruy",]$Name <- "Ruy Lopez"
# openings$Color = gradient_n_pal(sequential_hcl(6, palette = c("Red-Yellow")))
# pie(openings$Percentage, labels = openings$Name)
# pie(openings$Percentage, labels = openings$Name, las=2, xlab="Opening", cex.names=7)
# pie(openings,las =2,cex.names = 0.7,xlab = Name, ylab = Percentage)
p1 = ggplot(openings, aes(area = Frequency, fill = Frequency, label = Name, subgroup = Current)) +
geom_treemap(layout="srow") +
geom_treemap_subgroup_border(colour=rgb(70/255, 200/255, 30/255), layout="srow") +
geom_treemap_subgroup_text(size = 20, alpha = 0, angle = 90, layout="srow", padding.x = grid::unit(10, "mm"), padding.y = grid::unit(10, "mm"),) +
geom_treemap_text(colour = "white", place = "centre", layout="srow", grow = TRUE) +
# scale_fill_manual(c(rep("Blue", openingIndex-1), "Green", rep("Blue", nrow(openings)-openingIndex)))
scale_color_brewer()
print(formatted_moves)
print(playerOpening)
save_loc <- "treemap.png"
print(save_loc)
ggsave(save_loc, plot = p1)
}
graph5("e4,e5,Nf3,Nc6")
graph5("d4,Nf6,c4,e6,g3,d5,Nf3,Be7")
graph5 <- function(s) {
playerOpening = "You played a novel game!"
data("chessopenings")
chessopenings <- data.frame(chessopenings)
moves <- strsplit(s, split = ",")[[1]]
format_moves <- function(moves) {
formatted_moves <- ""
for(m in 1:ifelse(length(moves) > 7, 7, length(moves))) {
mno <- as.integer(m/2 + 1)
if (m %% 2 != 0)
formatted_moves <- paste(c(formatted_moves, " ", as.character(mno), ". ", moves[m]), collapse = "")
else
formatted_moves <- paste(c(formatted_moves, " ", moves[m]), collapse = "")
}
formatted_moves <- substr(formatted_moves, 2, nchar(formatted_moves))
return(formatted_moves)
}
formatted_moves <- format_moves(moves)
while(length(moves) > 0) {
if(nrow(chessopenings[chessopenings$pgn == formatted_moves,]) > 0) {
playerOpening = chessopenings[chessopenings$pgn == formatted_moves,]$name
break
}
moves <- moves[1:length(moves)-1]
formatted_moves <-format_moves(moves)
}
unique_openings <- c("Alekhine", "Benko/Volga", "Benoni", "Bird", "Bishop", "Black Knights", "Blumenfeld", "Budapest", "Caro-Kann", "Catalan", "Center", "Colle", "Czech", "Danish", "Dutch", "Elephant", "English", "Evans", "Falkbeer", "Fianchetto", "Four Knights", "French", "Giuoco", "Goring", "Grunfeld", "Hungarian", "Italian", "King", "Latvian", "London", "Modern", "Nimzowitsch-Larsen", "Indian", "Open games", "Petroff", "Philidor", "Pirc", "Ponziani", "Queen", "Reti", "Ruy", "Scandinavian", "Scotch", "Sicilian", "Slav", "Tarrasch", "Tartakower", "Three Knights", "Torre", "Trompowsky", "Two Knights", "Unusual", "Veresov", "Vienna")
unique_openings_count <- rep(0, length(unique_openings))
flag <- FALSE
found <- FALSE
for(O in chessopenings[order(chessopenings$name),]$name) {
if(O == playerOpening) flag = TRUE
for(i in 1:length(unique_openings)) {
if(sjmisc::str_contains(O, unique_openings[i])) {
unique_openings_count[i] <- unique_openings_count[i] + 1
if(flag) {
playerOpening <- unique_openings[i]
found <- TRUE
}
}
if(found) break
}
if(found) break
}
if(!found) playerOpening <- "Other Openings"
temp_openings <- data.frame(unique_openings, unique_openings_count)
names(temp_openings) <- c("Name", "Frequency")
openings <- temp_openings
openings$Name <- as.character(openings$Name)
openings[nrow(openings)+1,] <- c("Other Openings", sum(openings[openings$Frequency <= 10,]$Frequency))
openings$Frequency <- as.integer(openings$Frequency)
openings <- openings[openings$Frequency > 10,]
# openings$Percentage <- as.numeric(openings$Frequency/sum(openings$Frequency)) * 100
openings$Current <- FALSE
rownames(openings) <- 1:nrow(openings)
if(TRUE %in% (openings$Name == playerOpening)) {
openings[openings$Name == playerOpening,]$Current <- TRUE
} else {
openings[openings$Name == "Other Openings",]$Current <- TRUE
}
openingIndex <- as.integer(rownames(openings[openings$Name == playerOpening,]))
openings[openings$Name == "Queen",]$Name <- "Queen's Pawn"
openings[openings$Name == "King",]$Name <- "King's Pawn"
openings[openings$Name == "Ruy",]$Name <- "Ruy Lopez"
# openings$Color = gradient_n_pal(sequential_hcl(6, palette = c("Red-Yellow")))
# pie(openings$Percentage, labels = openings$Name)
# pie(openings$Percentage, labels = openings$Name, las=2, xlab="Opening", cex.names=7)
# pie(openings,las =2,cex.names = 0.7,xlab = Name, ylab = Percentage)
p1 = ggplot(openings, aes(area = Frequency, fill = Frequency, label = Name, subgroup = Current)) +
geom_treemap(layout="srow") +
geom_treemap_subgroup_border(colour=rgb(70/255, 200/255, 30/255), layout="srow") +
geom_treemap_subgroup_text(size = 20, alpha = 0, angle = 90, layout="srow", padding.x = grid::unit(10, "mm"), padding.y = grid::unit(10, "mm"),) +
geom_treemap_text(colour = "white", place = "centre", layout="srow", grow = TRUE) +
# scale_fill_manual(c(rep("Blue", openingIndex-1), "Green", rep("Blue", nrow(openings)-openingIndex)))
scale_color_brewer()
print(formatted_moves)
print(playerOpening)
save_loc <- "treemap.png"
print(save_loc)
ggsave(save_loc, plot = p1)
}
graph5("d4,Nf6,c4,e6,g3,d5,Nf3,Be7")
graph5 <- function(s) {
playerOpening = "You played a novel game!"
data("chessopenings")
chessopenings <- data.frame(chessopenings)
moves <- strsplit(s, split = ",")[[1]]
format_moves <- function(moves) {
formatted_moves <- ""
for(m in 1:ifelse(length(moves) > 7, 7, length(moves))) {
mno <- as.integer(m/2 + 1)
if (m %% 2 != 0)
formatted_moves <- paste(c(formatted_moves, " ", as.character(mno), ". ", moves[m]), collapse = "")
else
formatted_moves <- paste(c(formatted_moves, " ", moves[m]), collapse = "")
}
formatted_moves <- substr(formatted_moves, 2, nchar(formatted_moves))
return(formatted_moves)
}
formatted_moves <- format_moves(moves)
while(length(moves) > 0) {
if(nrow(chessopenings[chessopenings$pgn == formatted_moves,]) > 0) {
playerOpening = chessopenings[chessopenings$pgn == formatted_moves,]$name
break
}
moves <- moves[1:length(moves)-1]
formatted_moves <-format_moves(moves)
}
unique_openings <- c("Alekhine", "Benko/Volga", "Benoni", "Bird", "Bishop", "Black Knights", "Blumenfeld", "Budapest", "Caro-Kann", "Catalan", "Center", "Colle", "Czech", "Danish", "Dutch", "Elephant", "English", "Evans", "Falkbeer", "Fianchetto", "Four Knights", "French", "Giuoco", "Goring", "Grunfeld", "Hungarian", "Italian", "King", "Latvian", "London", "Modern", "Nimzowitsch-Larsen", "Indian", "Open games", "Petroff", "Philidor", "Pirc", "Ponziani", "Queen", "Reti", "Ruy", "Scandinavian", "Scotch", "Sicilian", "Slav", "Tarrasch", "Tartakower", "Three Knights", "Torre", "Trompowsky", "Two Knights", "Unusual", "Veresov", "Vienna")
unique_openings_count <- rep(0, length(unique_openings))
flag <- FALSE
found <- FALSE
for(O in chessopenings[order(chessopenings$name),]$name) {
if(O == playerOpening) flag = TRUE
for(i in 1:length(unique_openings)) {
if(sjmisc::str_contains(O, unique_openings[i])) {
unique_openings_count[i] <- unique_openings_count[i] + 1
if(flag && !found) {
playerOpening <- unique_openings[i]
found <- TRUE
}
}
}
}
if(!found) playerOpening <- "Other Openings"
temp_openings <- data.frame(unique_openings, unique_openings_count)
names(temp_openings) <- c("Name", "Frequency")
openings <- temp_openings
openings$Name <- as.character(openings$Name)
openings[nrow(openings)+1,] <- c("Other Openings", sum(openings[openings$Frequency <= 10,]$Frequency))
openings$Frequency <- as.integer(openings$Frequency)
openings <- openings[openings$Frequency > 10,]
# openings$Percentage <- as.numeric(openings$Frequency/sum(openings$Frequency)) * 100
openings$Current <- FALSE
rownames(openings) <- 1:nrow(openings)
if(TRUE %in% (openings$Name == playerOpening)) {
openings[openings$Name == playerOpening,]$Current <- TRUE
} else {
openings[openings$Name == "Other Openings",]$Current <- TRUE
}
openingIndex <- as.integer(rownames(openings[openings$Name == playerOpening,]))
openings[openings$Name == "Queen",]$Name <- "Queen's Pawn"
openings[openings$Name == "King",]$Name <- "King's Pawn"
openings[openings$Name == "Ruy",]$Name <- "Ruy Lopez"
# openings$Color = gradient_n_pal(sequential_hcl(6, palette = c("Red-Yellow")))
# pie(openings$Percentage, labels = openings$Name)
# pie(openings$Percentage, labels = openings$Name, las=2, xlab="Opening", cex.names=7)
# pie(openings,las =2,cex.names = 0.7,xlab = Name, ylab = Percentage)
p1 = ggplot(openings, aes(area = Frequency, fill = Frequency, label = Name, subgroup = Current)) +
geom_treemap(layout="srow") +
geom_treemap_subgroup_border(colour=rgb(70/255, 200/255, 30/255), layout="srow") +
geom_treemap_subgroup_text(size = 20, alpha = 0, angle = 90, layout="srow", padding.x = grid::unit(10, "mm"), padding.y = grid::unit(10, "mm"),) +
geom_treemap_text(colour = "white", place = "centre", layout="srow", grow = TRUE) +
# scale_fill_manual(c(rep("Blue", openingIndex-1), "Green", rep("Blue", nrow(openings)-openingIndex)))
scale_color_brewer()
print(formatted_moves)
print(playerOpening)
save_loc <- "treemap.png"
print(save_loc)
ggsave(save_loc, plot = p1)
}
graph5("d4,Nf6,c4,e6,g3,d5,Nf3,Be7")
graph5("d4,d5,c4,Bf5")
>>>>>>> 8ad27f1e9f92808232a0facea6225af898bb4e90
